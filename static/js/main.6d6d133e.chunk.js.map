{"version":3,"sources":["App.js","serviceWorker.js","index.js","tacocat.svg"],"names":["App","props","state","value","alert","handleChange","bind","handleSubmit","clearInputField","event","this","setState","target","str","newStr","toLowerCase","preventDefault","reduce","previous","next","document","getElementById","reset","className","src","tacocat","alt","id","onSubmit","type","placeholder","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"gTAkEeA,G,kBA7Db,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,MAAO,GAAIC,MAAO,IAEjC,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,gBANN,E,0EAQNG,GACXC,KAAKC,SAAS,CAAER,MAAOM,EAAMG,OAAOT,U,mCAGzBM,GACX,IAAII,EAAMH,KAAKR,MAAMC,MACjBW,EAASJ,KAAKR,MAAMC,MAAMY,cAC9BN,EAAMO,iBAELH,EAGK,YAAIC,GAAQG,OAAO,SAACC,EAAUC,GAAX,OAAoBA,EAAOD,MAAcL,EACxDH,KAAKC,SAAS,CAAEP,MAAM,GAAD,OAAKS,EAAL,yBACrBH,KAAKC,SAAS,CAAEP,MAAM,GAAD,OAAKS,EAAL,6BAJ3BH,KAAKC,SAAS,CAAEP,MAAO,wB,wCAQ3BgB,SAASC,eAAe,cAAcC,U,+BAItC,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAASF,UAAU,YAAYG,IAAI,SAC7C,wBAAIH,UAAU,SAASb,KAAKR,MAAME,OAClC,kDACA,0BACEmB,UAAU,aACVI,GAAG,aACHC,SAAUlB,KAAKH,cAEf,2BACEgB,UAAU,aACVM,KAAK,OACLC,YAAY,kBACZC,SAAUrB,KAAKL,aACfF,MAAOO,KAAKR,MAAMC,QAEpB,2BACEoB,UAAU,gBACVM,KAAK,SACL1B,MAAM,SACN6B,QAAStB,KAAKF,yB,GArDVyB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpB,SAASC,eAAe,SD2H3C,kBAAmBoB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,kBEnInBC,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.6d6d133e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport tacocat from \"./tacocat.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: \"\", alert: \"\" };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.clearInputField = this.clearInputField.bind(this);\n  }\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    let str = this.state.value;\n    let newStr = this.state.value.toLowerCase();\n    event.preventDefault();\n    let checkPalindrome;\n    !str\n      ? this.setState({ alert: \"Please Enter Text\" })\n      : (checkPalindrome =\n          [...newStr].reduce((previous, next) => next + previous) === str\n            ? this.setState({ alert: `${str} is a Palindrome :)` })\n            : this.setState({ alert: `${str} is not a Palindrome :(` }));\n  }\n\n  clearInputField() {\n    document.getElementById(\"text-input\").reset();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={tacocat} className=\"cat-image\" alt=\"logo\" />\n          <h1 className=\"alert\">{this.state.alert}</h1>\n          <p>IS IT A PALINDROME?</p>\n          <form\n            className=\"pali-check\"\n            id=\"text-input\"\n            onSubmit={this.handleSubmit}\n          >\n            <input\n              className=\"text-input\"\n              type=\"text\"\n              placeholder=\"Enter Text Here\"\n              onChange={this.handleChange}\n              value={this.state.value}\n            />\n            <input\n              className=\"submit-button\"\n              type=\"submit\"\n              value=\"Submit\"\n              onClick={this.clearInputField}\n            />\n          </form>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/tacocat.2e2c5abe.svg\";"],"sourceRoot":""}